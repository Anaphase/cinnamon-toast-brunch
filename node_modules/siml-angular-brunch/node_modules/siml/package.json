{
  "name": "siml",
  "title": "SIML",
  "description": "SIML, Simpified markup inspired by CSS",
  "version": "0.3.6",
  "author": {
    "name": "James Padolsey",
    "url": "http://git.io/padolsey"
  },
  "main": "dist/siml.all.js",
  "dependencies": {
    "commander": "0.6.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "0.1.1rc6",
    "grunt-contrib-uglify": "0.1.1rc6",
    "grunt-contrib-jasmine": "0.4.2",
    "grunt-contrib-concat": "0.1.3",
    "grunt": "0.4.0rc5"
  },
  "keywords": [],
  "readmeFilename": "readme.md",
  "gitHead": "7b62a62a4c9f70afba54df5b62c64d86de15ba47",
  "directories": {
    "test": "test"
  },
  "bin": {
    "siml": "bin/siml"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/padolsey/siml.git"
  },
  "license": "MIT",
  "readme": "# SIML\n\n**SIML is the Simplified Markup Language.\nIt is a conceptual hybrid strongly inspired by the simplicity of CSS selectors and SASS-style nesting.**\n\n * **[Try it out here!](http://padolsey.github.com/SIML/)**\n * [See 101 intro wiki](https://github.com/padolsey/SIML/wiki/101---Introduction)\n * [AngularJS user? -- Look at this!](https://github.com/padolsey/SIML/wiki/AngularJS)\n\n### Why did you make it?\n\n * This project was originally a personal exploration into the world of language parsing\n * Writing HTML isn't the worst thing in the world. But it takes time. And as a programmer, I'm lazy.\n * I enjoy the expressive power of tiny expressions (hence my love of Perl and RegExps)\n\n### *Another* templating hybrid whatchamacallit!1!?\n\nNo, SIML isn't a templating language. It doesn't currently provide constructs for\nincluding data, controlling flow or looping. Reasoning behind this:\n\n1. Feature bloat\n2. People still write plain ol' HTML\n3. Pure DOM templates are on the rise. See AngularJS or Knockout.\n\n### What is it?\n\nSIML allows you to write HTML with more ease and less cruft. *\"SIML\"* is the name of the language, \nand also the utility for converting the language to HTML.\n\nYou can specify your elements through CSS selectors:\n\n```html\ndiv           -> <div></div>\np.foo[baz]    -> <p class=\"foo\" baz></p>\ndiv#x.ace     -> <div id=\"x\" class=\"ace\"></div>\nem > span     -> <em><span></span></em>\nem 'Ok then'  -> <em>Ok then</em>\n```\n\nOk, the last one wasn't a CSS selector, it included a string. But it makes sense, right?\n\nSIML allows nesting with curlies, just like [Sassy CSS](http://sass-lang.com/):\n\n```css\nsection.body {\n  h1#title {\n    'Title'\n  }\n}\n```\n\nOr significant whitespace (i.e. *indent to nest*):\n\n```css\nsection.body\n  h1#title\n    'Title'\n```\n\nBut you're not forced to build hierarchies with nesting; you can do one-liners instead:\n\n```text\nsection.body > h1#title 'Title'\n```\n\nThat'll give you:\n\n```html\n<section class=\"body\">\n  <h1 id=\"title\">\n    Title\n  </h1>\n</section>\n```\n\nAs shown, SIML gives you the expressive power of CSS selectors. It also supports Attributes, Text and Directives. \n\n```js\nsection {          // Selector\n  class: body      // Attribute\n  ' foo blah '     // Text directive\n  text: 'foo'      // Custom Text Attribute\n  @foo(1,2,3)      // Custom directive\n}\n```\n\n*Note: You can extend SIML to support your own attributes, directives and psuedo-classes. For an example see [generators/angular.js](https://github.com/padolsey/siml/blob/master/src/generators/angular.js)*\n\nSIML allows you to express more with less effort and, perhaps, more clarity:\n\n```js\nsection.contact > form\n\n  h2 'Enter contact details'\n\n  label[for=name]\n    'Your name?'\n    input#name\n  \n  label[for=human]\n    'Are you human?'\n    input:checkbox#human\n\n  input:submit 'Submit form...'\n```\n\nThat would give you:\n\n```html\n<section class=\"contact\">\n  <form>\n    <h2>\n      Enter contact details\n    </h2>\n    <label for=\"name\">\n      Your name?\n      <input id=\"name\"/>\n    </label>\n    <label for=\"human\">\n      Are you human?\n      <input type=\"checkbox\" id=\"human\"/>\n    </label>\n    <input type=\"submit\"/>\n  </form>\n</section>\n```\n\n### Is that it!?\n\nNope. SIML has some hidden gems. Some are still being tweaked. \n\nFor example, you can use the syntax `(.../.../...)` to form an ExclusiveGroup which will make SIML expand a hierarchy to conform to the alternates you specify:\n\n```text\na (b/c) // <a><b></b></a><a><c></c></a>\n```\n\nThe above would be the same as writing:\n\n```text\na b\na c\n```\n\nA more useful example:\n\n```text\nul li ('wow'/'this'/'is'/'cool')\n```\n\nBecomes:\n\n```html\n<ul>\n  <li>wow</li>\n  <li>this</li>\n  <li>is</li>\n  <li>cool</li>\n</ul>\n```\n\nAnother cool feature is multipliers (looks like a numeric psuedo class):\n\n```text\ndiv a:3\n```\n\nBecomes:\n\n```html\n<div>\n  <a></a>\n  <a></a>\n  <a></a>\n</div>\n```\n\n### SIML's Extensibility\n\nSIML allows you to make your own SIML generator by configuring:\n\n * Attribute handlers\n * Directive handlers\n * Pseudo-class handlers\n\nThis means, with a bit of configuration, you can write custom markup for your bespoke need. E.g.\n\n*This uses the [angular generator](https://github.com/padolsey/siml/blob/master/src/generators/angular.js) which converts directives and undefined pseudo-classes to `ng-` attributes.*\n\n```text\nul#todo-list > li\n  @repeat( todo in todos | filter:statusFilter )\n  @class({\n    completed: todo.completed,\n    editing: todo == editedTodo\n  })\n```\n\nThis would become:\n\n```html\n<ul id=\"todo-list\">\n  <li\n    ng-repeat=\"todo in todos | filter:statusFilter\"\n    ng-class=\"{ completed: todo.completed, editing: todo == editedTodo }\"\n  ></li>\n</ul>\n```\n\n**[More info on AngularJS in SIML](https://github.com/padolsey/SIML/wiki/AngularJS)**\n\n### Distributions\n\n * `dist/siml.js`: This is the default generator. No fancy stuff. Not even `input:checkbox` support.\n * `dist/siml.html5.js`: For now, this includes small things like `doctype()` support and `input:type` suppport.\n * `dist/siml.angular.js`: This is the angular generator, which makes it easier to write `ng-...` attributes with directives/pseudo-classes. ([Example here](https://github.com/padolsey/siml/blob/master/test/resources/angular-test.siml)). *Currently also includes `input:type` support*.\n * `dist/siml.all.js`: This includes html5 and angular.\n\n### How to use:\n\n#### Browser:\n\n```html\n<script src=\"dist/siml.all.min.js\"></script>\n<script>\n  siml.html5.parse('a.foo#blah{span \"ok\"}', {\n  \tcurly: false,  // [default=false] pass true if you're using curlies for hierarchy\n  \tpretty: false, // [default=true] Will give you pretty HTML\n  \tindent: '....' // [default='  '] Use custom indentation when pretty=true\n  });\n  // Generates:\n  //   <a id=\"blah\" class=\"foo\">\n  //   ....<span>\n  //   ........ok\n  //   ....</span>\n  //   </a>\n</script>\n```\n\n#### Node:\n\n```\nnpm install siml\n```\n\n```js\nvar siml = require('siml');\n\n// Using the html5 generator (e.g. to support :checkbox)\nsiml.html5.parse('input:checkbox'; // => '<input type=\"checkbox\" />'\n```\n\nMore to come...\n\n## CHANGELOG\n\n * 0.2.0 Introduced single line macro-type selectors and quick-tags (vowelless) as part of the HTML5 generator, e.g. `html hd{meta[charset=utf-8]+title{'Cool'}} bdy`\n * 0.2.1 Various features added\n * 0.3.0\n  * Many optimisations to prevent pointless backtracking in the parser\n  * Refactor of parser components.\n  * Introduction of ExclusiveGroups (`(a/b)`) and InclusiveGroups (`a+b,d`)\n  * Improvement of specs\n * 0.3.1\n  * Using Object.create shim (not exposed though)\n  * Changed naming of customisable Parsers to \"Generators\" (makes more sense)\n * 0.3.2\n  * Directives can now have children. See [new feature specs](https://github.com/padolsey/SIML/commit/c528c4ac7cf2016699feb2c4b5b5ffed1a8ad803).\n  * Selector Prototypes. See [Issue #2](https://github.com/padolsey/SIML/issues/2)\n * 0.3.3\n  * Break-out feature. See [Issue #3](https://github.com/padolsey/SIML/issues/3)\n  * Support for here-doc style text (escaped) and HTML strings\n * 0.3.4\n  * Fixed issue where attribute/directive values did not support backtick (no-escape) quotes. See [Issue #4](https://github.com/padolsey/SIML/issues/4)\n * 0.3.5\n  * Fixed using quoted strings in 'heredoc' blocks. See [Issue #5](https://github.com/padolsey/SIML/issues/5)\n * 0.3.6\n  * Fixed issue where singular tags would not multiply (`selector:n`). See [Issue #6](https://github.com/padolsey/SIML/issues/6)\n  * Fixed issue where backtick quotes within regular quotes would get parsed and result in `%HTML_TOKEN%` tokens in the output.\n",
  "_id": "siml@0.3.6",
  "_from": "siml@~0.3.6"
}
